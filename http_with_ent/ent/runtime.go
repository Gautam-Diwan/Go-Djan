// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/hello/http_with_ent/ent/blog"
	"example/hello/http_with_ent/ent/schema"
	"example/hello/http_with_ent/ent/tag"
	"example/hello/http_with_ent/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	blogFields := schema.Blog{}.Fields()
	_ = blogFields
	// blogDescTitle is the schema descriptor for title field.
	blogDescTitle := blogFields[0].Descriptor()
	// blog.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	blog.TitleValidator = func() func(string) error {
		validators := blogDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// blogDescDescription is the schema descriptor for description field.
	blogDescDescription := blogFields[1].Descriptor()
	// blog.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	blog.DescriptionValidator = blogDescDescription.Validators[0].(func(string) error)
	// blogDescEpisode is the schema descriptor for episode field.
	blogDescEpisode := blogFields[2].Descriptor()
	// blog.EpisodeValidator is a validator for the "episode" field. It is called by the builders before save.
	blog.EpisodeValidator = blogDescEpisode.Validators[0].(func(int) error)
	// blogDescCreatedAt is the schema descriptor for created_at field.
	blogDescCreatedAt := blogFields[3].Descriptor()
	// blog.DefaultCreatedAt holds the default value on creation for the created_at field.
	blog.DefaultCreatedAt = blogDescCreatedAt.Default.(func() time.Time)
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = func() func(string) error {
		validators := tagDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tagDescType is the schema descriptor for type field.
	tagDescType := tagFields[1].Descriptor()
	// tag.DefaultType holds the default value on creation for the type field.
	tag.DefaultType = tagDescType.Default.(string)
	// tag.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	tag.TypeValidator = func() func(string) error {
		validators := tagDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.DefaultPassword holds the default value on creation for the password field.
	user.DefaultPassword = userDescPassword.Default.(string)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[2].Descriptor()
	// user.DefaultAge holds the default value on creation for the age field.
	user.DefaultAge = userDescAge.Default.(int)
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescIsActive is the schema descriptor for is_active field.
	userDescIsActive := userFields[3].Descriptor()
	// user.DefaultIsActive holds the default value on creation for the is_active field.
	user.DefaultIsActive = userDescIsActive.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
}
