// Code generated by ent, DO NOT EDIT.

package tag

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tag type in the database.
	Label = "tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// EdgeBlogs holds the string denoting the blogs edge name in mutations.
	EdgeBlogs = "blogs"
	// Table holds the table name of the tag in the database.
	Table = "tags"
	// BlogsTable is the table that holds the blogs relation/edge. The primary key declared below.
	BlogsTable = "tag_blogs"
	// BlogsInverseTable is the table name for the Blog entity.
	// It exists in this package in order to avoid circular dependency with the "blog" package.
	BlogsInverseTable = "blogs"
)

// Columns holds all SQL columns for tag fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldCategory,
}

var (
	// BlogsPrimaryKey and BlogsColumn2 are the table columns denoting the
	// primary key for the blogs relation (M2M).
	BlogsPrimaryKey = []string{"tag_id", "blog_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryHot           Category = "Hot"
	CategoryTrending      Category = "Trending"
	CategoryNewest        Category = "Newest"
	CategoryControversial Category = "Controversial"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryHot, CategoryTrending, CategoryNewest, CategoryControversial:
		return nil
	default:
		return fmt.Errorf("tag: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Tag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByBlogsCount orders the results by blogs count.
func ByBlogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogsStep(), opts...)
	}
}

// ByBlogs orders the results by blogs terms.
func ByBlogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BlogsTable, BlogsPrimaryKey...),
	)
}
